{
  "blogPosts": [
    {
      "id": "Rocky Linux 9.3 系统安装",
      "metadata": {
        "permalink": "/Rocky Linux 9.3 系统安装",
        "editUrl": "https://github.com/wrm244/docusaurus-theme-zen/edit/main/blog/04-Rocky Linux 9.3 系统安装.md",
        "source": "@site/blog/04-Rocky Linux 9.3 系统安装.md",
        "title": "Rocky Linux 9.3 系统安装",
        "description": "rocky",
        "date": "2024-06-05T21:35:00.000Z",
        "formattedDate": "2024年6月5日",
        "tags": [
          {
            "label": "rocky",
            "permalink": "/tags/rocky"
          },
          {
            "label": "linux",
            "permalink": "/tags/linux"
          }
        ],
        "readingTime": 4.01,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Week",
            "title": "静心",
            "url": "https://github.com/week2311",
            "imageURL": "/assets/images/social/avatar.png",
            "key": "Week"
          }
        ],
        "frontMatter": {
          "slug": "Rocky Linux 9.3 系统安装",
          "title": "Rocky Linux 9.3 系统安装",
          "date": "2024-06-05 21:35",
          "tags": [
            "rocky",
            "linux"
          ],
          "authors": "Week"
        },
        "nextItem": {
          "title": "Netstat命令运用之，深入理解网络连接",
          "permalink": "/Netstat命令运用之，深入理解网络连接"
        }
      },
      "content": "<!-- ![logo](/assets/images/rockylinux.jpg) -->\r\n![rocky](/assets/images/rockylinux.jpg)\r\n### 写在前面\r\n\r\n​\t\tCentos最为Linux开源发行版中最受人欢迎的系列，即将迎来它的黄昏。其所带来的价值是无限的，地位是不可替代的。我也是其中受益的一份子。\r\n\r\n​\t\t正因如此，需要找到能够平替的新系统：差异化小，稳定健壮，提供长支持能力。\r\n\r\n​\t\tUbuntu，Fedora，SUSE，RedHat，Rocky......都是能够考虑的。\r\n\r\n​\t\t今天推荐的是Rocky Linux，与Centos几乎无异，命令通用，安装简单，开源，对标RH而进行的代码重构，且作者是前Centos项目的创始人，提供长期支持，提供Centos迁移方案等，是我认为该系统是下一个Centos。\r\n\r\n\r\n<!-- truncate -->\r\n\r\n\r\n### 安装步骤：\r\n\r\n1. 官网下载Rocky Linux 9.3镜像\r\n\r\n   注意：在本文编写时间，Rocky最新版本9.4发布，官网的下载页面默认均为9.4，下载地址为：\r\n\r\n   ```shell\r\n   https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9.4-x86_64-minimal.iso\r\n   ```\r\n\r\n   ​\t\t\t如果想要下载历史版本的镜像，地址与上面并不相同。目前Rocky 9.3下载地址为：\r\n\r\n   ```shell\r\n   https://dl.rockylinux.org/vault/rocky/9.3/isos/x86_64/Rocky-9.3-x86_64-minimal.iso\r\n   ```\r\n\r\n   \r\n\r\n2. Rocky Linux 9.3 系统安装\r\n\r\n   * Vmware 17版本演示.\r\n\r\n   * 新建虚拟机步骤不再赘述. \r\n\r\n     * 磁盘容量：50G\r\n\r\n     * 内存：1G；CPU：1核\r\n\r\n     * 选用 步骤1 中现在的镜像.\r\n\r\n     * 需要注意的是，在`新建虚拟机的导向过程`中，客户机操作系统的选择，版本这里选用的是：其它 Linux 5.x 内核 64 位. \r\n\r\n     * 启动虚拟机，出现如下界面. （ 了解Centos7系统的，相信并不陌生. ）默认第一步即可. \r\n\r\n       ![image-20240604143043854](/images/04-rocky_linux/image-20240604143043854.png)\r\n\r\n     * 进入安装界面，语言选择 中文简体 ；继续，进入该界面: \r\n\r\n       ​\t![image-20240604143507063](/images/04-rocky_linux/image-20240604143507063.png)\r\n\r\n       * 进入：软件选择，勾选标准安装. （ 附带上系统环境软件 ）.\r\n       * 进入：安装目的地，自定义划分磁盘：/boot分区：512M-1024M；swap分区：内存的2倍（若真实服务器内存>16GB，则swap分区大小为内存的1倍）；/分区：剩余全部 .\r\n\r\n       ![image-20240604144215882](/images/04-rocky_linux/image-20240604144215882.png)\r\n\r\n       * 进入：Root密码，配置root密码，并勾选下方的`允许使用root用户进行ssh远程登录.` .\r\n\r\n       * 开始安装 . \r\n\r\n       * 安装结束，进入登录界面. \r\n\r\n         * 提示信息：activate the web console with:  systemctl enable --now cockpit.socket\r\n\r\n           该含义是：使用命令：\"systemctl enable --now cockpit.socket\" 激活web管理界面。即该系统安装了cockpit, 激活cockpit, 能够实现图形化界面管理Rocky Linux系统。\r\n\r\n     3. IP地址配置，SSH远程连接\r\n\r\n        不同于Centos7，Rocky Linux 9.3中配置IP地址的方式，有较大的差别。配置方式有三种：\r\n\r\n        1. nmtui：通过图形化界面配置网络\r\n        2. nmcli：通过命令/交互方式配置网络（官方推荐）\r\n        3. 网卡配置文件方式配置网络（官方不推荐）\r\n\r\n        但由于本人是Centos7系统的重度感染者，依旧习惯于编辑网卡配置文件的方式。\r\n\r\n        ```shell\r\n        # 编辑网络配置文件\r\n        vi /etc/NetworkManager/system-connections/ens33.nmconnection\r\n        \r\n        [connection]\r\n        id=ens33\r\n        uuid=a5d63f95-a602-3897-943a-f48238886e99\r\n        type=ethernet\r\n        autoconnect-priority=-999\r\n        interface-name=ens33\r\n        \r\n        [ethernet]\r\n        \r\n        [ipv4]\r\n        method=manual\r\n        address=192.168.10.166/24\r\n        gateway=192.168.10.2\r\n        dns=114.114.114.114;8.8.8.8\r\n        \r\n        [ipv6]\r\n        addr-gen-mode=eui64\r\n        method=auto\r\n        \r\n        [proxy]\r\n        \r\n        # 重启生效\r\n        nmcli connection  load /etc/NetworkManager/system-connections/ens33.nmconnection\r\n        nmcli connection  up /etc/NetworkManager/system-connections/ens33.nmconnection \r\n        \r\n        # 查看生效\r\n        ifconfig ens33 或者 ip addr\r\n        ```\r\n\r\n        上述网卡文件内容解释 ( 内容来自官网：[RL9 - network manager - Documentation (rockylinux.org)](https://docs.rockylinux.org/zh/gemstones/network/RL9_network_manager/?h=networkmanager) )：\r\n\r\n        | connection     |                                                              |\r\n        | -------------- | ------------------------------------------------------------ |\r\n        | 键名称         | 描述                                                         |\r\n        | id             | con-name 的别名，其值为字符串。                              |\r\n        | uuid           | 设备唯一表示。                                               |\r\n        | type           | 连接的类型，其值可以是 ethernet、bluetooth、vpn、vlan 等等。 您可以使用 `man nmcli` 查看所有支持的类型。 |\r\n        | interface-name | 此连接绑定到的网络接口的名称，其值为字符串。                 |\r\n        | timestamp      | Unix 时间戳，以秒为单位。 此处的值是自1970年1月1日以来的秒数。 |\r\n        | autoconnect    | 是否随系统开机自启动。 值为布尔型。                          |\r\n        |                |                                                              |\r\n        | **ethernet**   |                                                              |\r\n        | 键名称         | 描述                                                         |\r\n        | mac-address    | MAC 物理地址。                                               |\r\n        | mtu            | 最大传输单位。                                               |\r\n        | auto-negotiate | 是否自动协商。 值为布尔型。                                  |\r\n        | duplex         | 值可以是 half （半双工）、full（全双工）                     |\r\n        | speed          | 指定网卡的传输速率。 100 即 100Mbit/s。 如果**auto-negotiate=false**，则必须设置 **speed** 键和 **duplex** 键；如果 **auto-negotiate=true**，则使用的速率为协商速率，此处的写入不生效（仅适用于BASE-T 802.3规范）；当非零时，**duplex** 键必须有值。 |\r\n        |                |                                                              |\r\n        | **ipv4**       |                                                              |\r\n        | 键名称         | 描述                                                         |\r\n        | address        | 分配的IP地址。                                               |\r\n        | gateway        | 分配的网关地址。                                             |\r\n        | dns            | 分配的dns地址，多个dns地址之间使用；分隔。                   |\r\n        | method         | IP获取的方法。 值是字符串类型。 值可以是：auto、disabled、link-local、manual、shared【auto：自动获取；manual：静态获取】 |\r\n\r\n     \r\n\r\n     **至此，可以通过远程连接工具，连接使用。**\r\n### 写在最后\r\n\r\n​\t\t\t对于大多数企业来讲，更换一个操作系统，风险，精力是巨大的，可能更多的是选择后来者的业务部署在新的系统，逐渐的转变。\r\n\r\n​\t\t\tRocky Linux希望能够成为各位的选择.......\r\n\r\n​"
    },
    {
      "id": "Netstat命令运用之，深入理解网络连接",
      "metadata": {
        "permalink": "/Netstat命令运用之，深入理解网络连接",
        "editUrl": "https://github.com/wrm244/docusaurus-theme-zen/edit/main/blog/03-Netstat命令运用之，深入理解网络连接.md",
        "source": "@site/blog/03-Netstat命令运用之，深入理解网络连接.md",
        "title": "Netstat命令运用之，深入理解网络连接",
        "description": "假设你要给朋友打一个电话，输入电话号码，之后朋友接通了电话，那么，通话过程就算是建立成功。这个接通的状态我们称之为ESTABLISHED。",
        "date": "2024-03-10T21:50:00.000Z",
        "formattedDate": "2024年3月10日",
        "tags": [
          {
            "label": "tcp",
            "permalink": "/tags/tcp"
          },
          {
            "label": "netstat",
            "permalink": "/tags/netstat"
          }
        ],
        "readingTime": 7.1,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Week",
            "title": "静心",
            "url": "https://github.com/week2311",
            "imageURL": "/assets/images/social/avatar.png",
            "key": "Week"
          }
        ],
        "frontMatter": {
          "slug": "Netstat命令运用之，深入理解网络连接",
          "title": "Netstat命令运用之，深入理解网络连接",
          "date": "2024-03-10 21:50",
          "tags": [
            "tcp",
            "netstat"
          ],
          "authors": "Week"
        },
        "prevItem": {
          "title": "Rocky Linux 9.3 系统安装",
          "permalink": "/Rocky Linux 9.3 系统安装"
        },
        "nextItem": {
          "title": "SSL证书详解",
          "permalink": "/ssl证书详解"
        }
      },
      "content": "<!-- ![logo](/assets/images/avatar300.png) -->\r\n\r\n\r\n\r\n假设你要给朋友打一个电话，输入电话号码，之后朋友接通了电话，那么，通话过程就算是建立成功。这个接通的状态我们称之为`ESTABLISHED`。\r\n\r\n不管是在Windows系统，还是Linux系统，功能的提供都依靠背后的进程。因此，读懂进程语言是重要的。\r\n\r\n在上面的例子中，如果建立通话过程中遇到了故障了，又会是哪些状态呢？\r\n\r\n<!-- truncate -->\r\n\r\n## 状态分类\r\n\r\n1. **LISTEN**：表示进程正在监听指定端口，等待其他进程发起连接请求。好比你的朋友家电话在等待其他人拨打过来。\r\n2. **ESTABLISHED**：表示连接已经建立并且数据可以传输。\r\n3. **TIME_WAIT**：表示进程在等待，以确保远程端接收到最后的确认。好比你在等待你的朋友接听。\r\n4. **CLOSE_WAIT**：表示连接已经关闭，但你还在等待朋友对电话做出回应。\r\n5. **FIN_WAIT1 和 FIN_WAIT2**：表示连接即将关闭或正在等待远程端的关闭信号，好比你正准备要挂断电话一样。\r\n6. **CLOSING**：表示连接关闭过程中可能出现问题，类似于拨打过程中出现异常情况。\r\n7. **LAST_ACK**：表示你拨打了电话，但还在等待朋友的确认。\r\n8. **SYN_SENT 和 SYN_RECV**：表示正在建立连接的过程中，好比你通话过程的建立中。\r\n9. **UNKNOWN**：表示状态未知，可能是系统出现异常，好比是信号塔出现了故障，导致电话信号无法发送，或者无法拨打。\r\n\r\n\r\n\r\n## 查看状态\r\n\r\n以Linux系统为例，使用`netstat`或者`ss`命令进行查看进程连接状态\r\n\r\n```shell\r\n# netstat 命令的基本用法和常用选项：\r\n-a（all）：显示所有连接和监听端口，包括那些处于等待连接的状态。\r\n-t（tcp）：仅显示 TCP 协议相关的连接信息。\r\n-u（udp）：仅显示 UDP 协议相关的连接信息。\r\n-n（numeric）：以数字形式显示地址和端口号，而不进行反向域名解析。\r\n-p（program）：显示与连接相关的进程信息。\r\n-e（extended）：显示额外的详细信息，如用户 ID 和 inode 等。\r\n-r（route）：显示路由表信息。\r\n-c（continuous）：持续显示网络状态信息，而非一次性输出。\r\n\r\n# 查看tcp协议的进程\r\n[root@localhost ~]# netstat -naplt\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \r\ntcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      8955/php-fpm: maste \r\ntcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      8159/mysqld         \r\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      6768/sshd           \r\ntcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      7065/master         \r\ntcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      9603/zabbix_agentd  \r\ntcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      9722/zabbix_server  \r\ntcp        0      0 127.0.0.1:10050         127.0.0.1:51314         TIME_WAIT   -                   \r\ntcp        0      0 127.0.0.1:10050         127.0.0.1:51300         TIME_WAIT   -                 \r\ntcp        0      0 192.168.10.110:22       192.168.10.1:33819      ESTABLISHED 21143/sshd: root@pt \r\ntcp        0      0 127.0.0.1:10050         127.0.0.1:51278         TIME_WAIT   -                   \r\ntcp        0      0 127.0.0.1:10050         127.0.0.1:51296         TIME_WAIT   -                   \r\ntcp        0      0 127.0.0.1:10050         127.0.0.1:51346         TIME_WAIT   -                   \r\ntcp        0      0 127.0.0.1:10050         127.0.0.1:51318         TIME_WAIT   -                   \r\ntcp        0      0 192.168.10.110:22       192.168.10.1:1834       ESTABLISHED 7250/sshd: root@pts \r\n\r\n# 输出信息说明：\r\nProto：协议类型，如tcp或udp。\r\nRecv-Q：接收队列中的数据量（以字节为单位）。\r\nSend-Q：发送队列中的数据量（以字节为单位）。\r\nLocal Address：本地IP地址和端口号。\r\nForeign Address：远程IP地址和端口号。\r\nState：连接状态。\r\nPID/Program name：与连接关联的进程ID和程序名称\r\n\r\n============================================================================================================\r\n\r\n# ss 命令的基本用法和常用选项：\r\n-t：显示 TCP 套接字信息。\r\n-u：显示 UDP 套接字信息。\r\n-l：仅显示监听状态的套接字。\r\n-a：显示所有套接字（包括监听和非监听状态）。\r\n-p：显示与套接字关联的进程信息。\r\n-n：以数字形式显示地址和端口号，而不进行反向域名解析。\r\n-s：按照协议统计套接字数量。\r\n-o：显示计时器信息。\r\n-i：显示套接字的详细信息。\r\n\r\n# 查看tcp协议的进程\r\n[root@localhost ~]# ss -naptn\r\nState     Recv-Q  Send-Q      Local Address:Port    Peer Address:Port              \r\nLISTEN      0      50               *:3306      \t\t*:*   \t\t   users:((\"mysqld\",pid=7740,fd=14))\r\n\r\n# 输出信息说明：\r\ntate：连接状态，这里是LISTEN，表示该端口正在监听来自其他计算机的连接请求。\r\nRecv-Q：接收队列中的数据量（以字节为单位），这里是0。\r\nSend-Q：发送队列中的数据量（以字节为单位），这里是50。\r\nLocal Address:Port：本地IP地址和端口号，*:3306表示所有网络接口上的3306端口。\r\nPeer Address:Port：对等方的IP地址和端口号，*:*表示任意远程地址和端口。\r\nusers：进程相关信息，包括进程名称（mysqld）、进程ID（pid=7740）和文件描述符（fd=14）。\r\n```\r\n\r\n\r\n\r\n## 底层原理\r\n\r\n进程之间的连接，都是依靠套接字来进行的，在linux系统中一般以.sock结尾的文件，称之为套接字文件。\r\n\r\n套接字：是进程与网络之间的接口，通过网络中不同主机上的一端，到另一端的通信，数据交换的机制。就好比是上方例子的电话本身就是套接字的抽象。在套接字文件中，会包含通信的基本信息：IP，端口等，就好比是打电话你要输入对方的电话号码。\r\n\r\n在建立过程当中，有TCP会话建立，UDP会话建立，这种建立过程，一般分为三步，熟称为`三次握手`；建立解除，一般分为四步，熟称为`四次挥手`。\r\n\r\n\r\n\r\n一图胜千言：\r\n\r\n![netstat](https://cdn.jsdelivr.net/gh/week2311/Images@main/netstat.png)结合上图，\r\n\r\n三次握手流程：\r\n\r\n1. 第一次握手。客户端向服务器发送一个SYN标志位置为1的包，并且包含一个随机生成的序列号（seq number），发送完毕后，客户端进入SYN_SENT状态，等待服务器的确认。\r\n2. 第二次握手。服务器收到客户端的SYN包后，会发送一个SYN和ACK标志位都置为1的包，其中ACK number设置为客户端的seq number加1，确定是回复的来自客户端的包，同时服务器也会生成一个随机数作为初始发送序号（initial sequence number）。发送完毕后，服务器进入SYN_RCVD状态。\r\n3. 第三次握手。客户端收到服务器的SYN+ACK包后，会发送一个ACK标志位置为1的包，其中ACK number设置为服务器的seq number加1，表示客户端确认收到了服务器的数据。发送完毕后，客户端和服务器进入ESTABLISHED状态，完成三次握手。\r\n\r\n四次挥手流程：\r\n\r\n1. 第一次挥手（FIN_WAIT_1）：客户端发送一个FIN报文，并指定一个序列号。这标志着客户端准备关闭从服务器到客户端的数据传输。客户端进入FIN_WAIT_1状态，此时客户端不再发送数据，但仍可接收数据。12345\r\n\r\n2. 第二次挥手（CLOSE_WAIT）：服务器收到客户端的FIN后，会发送一个ACK报文，确认号设置为收到的序列号加1。服务器进入CLOSE_WAIT状态，这意味着服务器已经收到客户端的关闭请求，但服务器可能还有数据需要发送给客户端。\r\n\r\n1. 第三次挥手（LAST_ACK）：服务器发送一个FIN报文，并指定一个序列号，表示服务器准备关闭从客户端到服务器的数据传输。服务器进入LAST_ACK状态。\r\n2. 第四次挥手（TIME_WAIT）：客户端收到服务器的FIN后，会发送一个ACK报文，确认号设置为收到的序列号加1。客户端进入TIME_WAIT状态，并等待一段时间（2MSL，即Maximum Segment Lifetime，报文段最大寿命），以确保服务器收到ACK报文。这段时间之后，客户端和服务器都进入CLOSED状态，完成四次挥手。\r\n\r\n注：在这里说明一下，网络查询的时候，会发现握手，或者挥手的过程中，有的连接会多seq序列的字段，比如四次挥手的服务器的第一次发送请求包，其实这里我的理解是seq作用是标记自己，回包的时候ack确认回复会使用到。但有的时候会发送两次连接，也就是两个seq发送，每一次的值不同，那么回包的时候也就以最后一次为准，所以有时图中未标记出，表示并未很大作用，没有展示出来。\r\n\r\n\r\n\r\n## 总结\r\n\r\n通过阅读本文，希望能够帮助你能更进一步的了解进程之间的网络连接，并且能够根据状态信息，在日常运维或者排查错误时，可以带来更多的思路，想法等等。"
    },
    {
      "id": "ssl证书详解",
      "metadata": {
        "permalink": "/ssl证书详解",
        "editUrl": "https://github.com/wrm244/docusaurus-theme-zen/edit/main/blog/02-SSL证书详解.md",
        "source": "@site/blog/02-SSL证书详解.md",
        "title": "SSL证书详解",
        "description": "在访问众多的网站中，相信大家都有遇到过下面的场景：",
        "date": "2024-02-25T12:20:00.000Z",
        "formattedDate": "2024年2月25日",
        "tags": [
          {
            "label": "ssl",
            "permalink": "/tags/ssl"
          },
          {
            "label": "ca",
            "permalink": "/tags/ca"
          }
        ],
        "readingTime": 5.523333333333333,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Week",
            "title": "静心",
            "url": "https://github.com/week2311",
            "imageURL": "/assets/images/social/avatar.png",
            "key": "Week"
          }
        ],
        "frontMatter": {
          "slug": "ssl证书详解",
          "title": "SSL证书详解",
          "date": "2024-02-25 12:20",
          "tags": [
            "ssl",
            "ca"
          ],
          "authors": "Week"
        },
        "prevItem": {
          "title": "Netstat命令运用之，深入理解网络连接",
          "permalink": "/Netstat命令运用之，深入理解网络连接"
        },
        "nextItem": {
          "title": "Docusaurus博客搭建",
          "permalink": "/first-blog"
        }
      },
      "content": "<!-- ![logo](/assets/images/avatar300.png) -->\r\n\r\n在访问众多的网站中，相信大家都有遇到过下面的场景：\r\n\r\n![ssl](https://cdn.jsdelivr.net/gh/week2311/Images@main/ssl.png)\r\n\r\n一般遇到这种情况，大多数都是点击高级继续访问，类似那种`无视风险继续安装`的意思。但其实这是浏览器在向你发出的一种警示信号，告诉你：访问这个IP地址的网站是不安全的。那么浏览器是如何得知的呢，答案就是`证书`。\r\n\r\n\r\n<!-- truncate -->\r\n## SSL协议\r\n\r\n首先我们先了解一下ssl协议：\r\n\r\n> SSL（Secure Sockets Layer）协议是一种用于在计算机网络上安全传输数据的协议。它使用加密技术来确保在客户端和服务器之间传输的数据是安全的，不会被未经授权的人员窃取或篡改。通常用于保护网站上的敏感信息，例如登录凭据、信用卡信息等。\r\n\r\n也就是说，这是一个信息传输过程中的安全加密协议，防止黑客的攻击，信息的泄露等。上图中的提示信息是如此，也是http+ssl协议实现了这样的效果。\r\n\r\n工作原理是通过在客户端和服务器之间建立安全的连接，然后使用加密算法对数据进行加密和解密。这样可以确保在数据传输过程中，即使被截获，也无法被破解。\r\n\r\n那么此时就有一个问题，如何去让一个服务，或者服务器得到信任呢？\r\n\r\n\r\n\r\n## CA证书\r\n\r\nCA证书用来标识服务器的一个合法身份，可以理解为的居民身份证。\r\n\r\n如何判断一个人是否是合法的中国公民 ----- 身份证\r\n\r\n如何判断一台服务器是否是合法的 ----- CA证书。\r\n\r\n现实生活中，身份证是由公安机颁发，那么一个人要拿到身份证，一般要经过以下流程：\r\n\r\n![person_card](https://cdn.jsdelivr.net/gh/week2311/Images@main/person_card.png)\r\n\r\n服务器领域中，CA证书是由CA机构（Certificate Authority，凭证管理中心）颁发的，那么要拿到CA机构颁发下来的证书，与上方的流程类型：\r\n\r\n![ca_card](https://cdn.jsdelivr.net/gh/week2311/Images@main/ca_card.png)\r\n\r\n### 申请证书\r\n\r\n根据上图，申请证书步骤如下：\r\n\r\n注：以下都是模拟证书的生成过程，真实情况一般不需要这么复杂，掏钱就行。\r\n\r\n1. 我们需要生成私钥，即非对称加密技术（下文会讲解）。\r\n\r\n```shell\r\nopenssl genrsa -out cert.key 1024\r\n```\r\n\r\n2. 创建证书申请文件.csr\r\n\r\n```shell\r\nopenssl req -new -key cert.key -out cert.csr\r\n# 在这一步骤中， 需要我们输入申请信息：国家，地区，组织，email等。\r\n```\r\n\r\n![csr](https://cdn.jsdelivr.net/gh/week2311/Images@main/csr.png)\r\n\r\n3. CA签发证书\r\n\r\n```shell\r\nopenssl x509 -req -days 365 -sha256 -in cert.csr -signkey cert.key -out cert.pem\r\n# 注解：\r\n# -days 365：证书有限期365天\r\n# -sha256：使用 SHA-256 哈希算法来对证书进行签名\r\n# -in cert.csr：指定申请文件路径\r\n# -sign cert.key：指定用于签名 CSR 的私钥文件的路径和名称\r\n# -out cert.pem：指定生成的证书文件的路径和名称\r\n```\r\n\r\n至此，在你的目录下，会多出来以下文件：\r\n\r\n```shell\r\n# cert.key：服务器私钥文件。\r\n# cert.csr：证书申请文件。\r\n# cert.pem：pem格式的证书文件，其中包含私钥，证书等秘密数据。\r\n```\r\n\r\n\r\n\r\n### 证书后缀\r\n\r\n有的时候，你会遇到这两种后缀的证书：.pem；.crt。二者都是证书文件扩展名，主要区别如下：\r\n\r\n1. PEM格式是一种基于Base64编码的ASCII文本格式，可以包含证书、私钥等多种格式的加密信息。\r\n2. PEM格式的证书常常用在Unix/Linux系统中，在Apache、Nginx等服务器软件中也广泛使用。\r\n\r\n3. CRT格式是一种二进制编码格式，主要用于Windows操作系统中的程序中，并且通常只包含证书信息。\r\n\r\n所以当看到这两种后缀的证书时，不要懵，其实都是证书文件。\r\n\r\n\r\n\r\n## 非对称加密\r\n\r\n`对称`：左右两边的图案，符号，数据等是一致的，称之为互相对称。那么在这里的`左`和`右`，可以理解为`客户端`和`服务器`，需要一致的对象是密钥，可以理解为同一把钥匙，才能解开数据。这种方式我们称之为`对称加密`。\r\n\r\n`非对称`：左右两边的图案，符号，数据等是不一致的，称之为非对称。那么在这里的`左`和`右`，可以理解为`客户端`和`服务器`，需要的对象是不同的密钥，才能解开数据。这种方式我们称之为`非对称加密`。\r\n\r\n在非对称加密中，密钥需要两个：公钥，私钥。\r\n\r\n* 公钥：顾名思义，就是公开的密钥，大家都可以得到。公钥负责加密数据\r\n* 私钥：不对外公开，特殊加密过的密钥。私钥负责解密数据\r\n\r\n只要通过私钥解开了公钥加密过的数据，那么就表示是被信任的，数据安全隧道才会建立。\r\n\r\n![encryption](https://cdn.jsdelivr.net/gh/week2311/Images@main/encryption.png)\r\n\r\n## HTTPS工作原理\r\n\r\n至此，我们知道SSL证书是为了解决数据明文传输不安全的风险：窃听风险，篡改风险，冒充风险。\r\n\r\n以HTTP为例，在未通过SSL加密时，数据传输模式：\r\n\r\n![image-20240220093754487](https://cdn.jsdelivr.net/gh/week2311/Images@main/risk.png)\r\n\r\n为了解决上述的问题，使用SSL进行数据加密传输，一开始是采用的是对称加密，但是这一方式还是存在安全风险。\r\n\r\n因为对称加密使用一对相同的密钥进行加密，解密。且密钥的传输是放在报文当中，也会使得中间人拦截，并篡改报文中的真密钥，返回假密钥给到客户端。\r\n\r\n那么如何保证数据的加，解密是唯一性的，且到达客户端的公钥是正确的呢？答案就是上文说到的`非对称加密`和`证书`。\r\n\r\n一图胜千言：\r\n\r\n![procedure](https://cdn.jsdelivr.net/gh/week2311/Images@main/procedure.png)\r\n\r\n根据图中描述可知，文章开头出现的情况，属于Client（浏览器）得到的证书是未被验证通过的，未知的证书。\r\n\r\n## 结语\r\n\r\n随着时间的转变，技术的迭代更新，SSL也出现了安全问题。后续出现了它的继任者--TLS协议，该协议在SSL的基础之上发展而来，得到了进一步的改进和优化。\r\n\r\n总之，SSL/TLS协议可以实现加强数据在传输过程的安全，不被窃取，监听等。在对安全性要求高的场景下，还会用到专业的安全硬件设备。毕竟数据是所有。\r\n\r\n\r\n\r\n参考链接：\r\n\r\n* https://baijiahao.baidu.com/s?id=1685474345600994715&wfr=spider&for=pc\r\n\r\n* https://blog.csdn.net/qq_60243891/article/details/132530818\r\n\r\n* https://blog.csdn.net/keeppractice/article/details/126975243\r\n\r\n## 📝License\r\n\r\n[MIT](./LICENSE) © Week 100%"
    },
    {
      "id": "first-blog",
      "metadata": {
        "permalink": "/first-blog",
        "editUrl": "https://github.com/wrm244/docusaurus-theme-zen/edit/main/blog/01-first-blog.md",
        "source": "@site/blog/01-first-blog.md",
        "title": "Docusaurus博客搭建",
        "description": "网站由来",
        "date": "2024-02-15T19:20:00.000Z",
        "formattedDate": "2024年2月15日",
        "tags": [
          {
            "label": "docusaurus-theme-zen",
            "permalink": "/tags/docusaurus-theme-zen"
          },
          {
            "label": "lifestyle",
            "permalink": "/tags/lifestyle"
          }
        ],
        "readingTime": 2.84,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Week",
            "title": "静心",
            "url": "https://github.com/week2311",
            "imageURL": "/assets/images/social/avatar.png",
            "key": "Week"
          }
        ],
        "frontMatter": {
          "slug": "first-blog",
          "title": "Docusaurus博客搭建",
          "date": "2024-02-15 19:20",
          "tags": [
            "docusaurus-theme-zen",
            "lifestyle"
          ],
          "authors": "Week"
        },
        "prevItem": {
          "title": "SSL证书详解",
          "permalink": "/ssl证书详解"
        }
      },
      "content": "<!-- ![logo](/assets/images/avatar300.png) -->\n## 网站由来\n对于碎片化的信息，知识，一直都没有很好的整理。有做过文档笔记，但是查找起来很麻烦，有的时候还不如直接百度来的快，因此也出现了重复性的搜索，于是为了方便自己，提高效率，萌生了搭建博客的想法。\ndocusaurus博客框架符合我的美感，之前也看过其他的博客框架，例如Hero，Wiki，Wordpress，Hexo等，但都不太喜欢。\n于是开始了解docusaurus，但自身并不懂前端语言，于是就在看到了河山的博客，感觉很不错，接下来的工作就是进行二开了，经过了三，四天的修改，便有了今天的样貌。\n\n## 项目目录\n\n基于docusaurus搭建的主题，结合了简单易用与其他开源页面设计方案、支持MDX和React、可扩展和定制等优点，以及加上多设计美观、博客与文档一体的主题，为你提供了一个优秀的个人页面解决方案。该主题使用🦖 <a href=\"https://docusaurus.io/\">Docusaurus</a>搭建，遵循[MIT](./LICENSE)协议。\n\n<!-- truncate -->\n\n> This is a theme built with docusaurus, which combines the simplicity and ease of use of docusaurus with other open source page design solutions, supports MDX and React, is extensible and customizable, and also has a beautiful design, a blog and documentation integrated theme, providing you with an excellent personal page solution.\n\n\n## 项目目录\n\n```bash\n├── blog                           # 博客\n│   ├── first-blog.md\n│   └── authors.yml                # 作者信息(可以多个作者)\n├── docs                           # 文档/笔记\n│   └── stack\n│         └──introduction.md       # 笔记介绍\n├── data                           # 项目/导航/友链数据\n│   ├── friend.ts                  # 友链\n│   ├── project.ts                 # 项目\n│   └── resource.ts                # 资源导航\n├── i18n                           # 国际化\n├── src\n│   ├── components                 # 组件\n│   ├── css                        # 自定义CSS\n│   ├── pages                      # 自定义页面\n│   ├── plugin                     # 自定义插件\n│   └── theme                      # 自定义主题组件\n├── static                         # 静态资源文件\n│   └── assets                     # 静态文件\n├── docusaurus.config.js           # 站点的配置信息\n├── sidebars.js                    # 文档的侧边栏\n├── package.json\n└── yarn.lock                      # 建议使用yarn保留\n```\n\n## 安装\n\n克隆仓库并安装依赖\n```bash\ngit clone https://github.com/week2311/blog.git ./blog\ncd blog\nyarn\nyarn start\n```\n\n国内仓库备份\n```bash\ngit clone https://github.com/week2311/blog.git ./blog\ncd blog\nyarn\n```\n\n生成静态网页代码(./build)\n\n```bash\nyarn run build\n```\n\n启动服务\n```bash\nyarn run serve\n```\n\n## Netlify托管\n对于个人而言，购买一台服务器来运行项目无疑是一项不菲的支出，虽然有云服务器。\nNetlify很好的解决了这个问题，每个月有 免费的 100G 流量、300分钟的构建，还有全球的CDN节点，对于我来说已经很够用了。\n在Netlify官网，点击 Deploy to Netlify，根据官方步骤走了就行了，很方便快捷，但前提是你需要将项目放到github仓库，\n且需要有一个域名。\n\n## 域名访问\n虽然有白嫖的域名，但建议去买一个属于自己的域名，一是国内访问快速，稳定，二是不需要很多繁琐的申请，快速。\n而且一年也就一杯咖啡的钱，有的新用户也就1块钱，像我这个就是阿里云上购买申请的，还是很不错的。\nSSL证书的话，可以通过腾讯云上去申请免费1年的，获取证书文件，然后将文件内容替换netlify上的，即可实现https访问。\n\n## 📝License\n\n[MIT](./LICENSE) © Week 100%"
    }
  ]
}